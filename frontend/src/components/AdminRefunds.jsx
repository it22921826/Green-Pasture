import React, { useEffect, useState } from 'react';
import { getSupportAll, updateSupportStatus } from '../api/supportApi';

const AdminRefunds = () => {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [search, setSearch] = useState('');
  const [preview, setPreview] = useState({ open: false, url: '', id: '' });
  const [viewed, setViewed] = useState(() => new Set());

  // Attempt to extract a data URL from the support message
  const extractProof = (message) => {
    try {
      const text = String(message || '');
      const m = text.match(/Attachment \(base64\):\s*(data:[^\s\r\n]+)/);
      return m ? m[1] : '';
    } catch(_) {
      return '';
    }
  };

  // Extract booking summary (room and dates) from message body generated by RefundForm
  const extractBookingSummary = (message) => {
    try {
      const text = String(message || '');
      const idMatch = text.match(/Booking ID:\s*(.+)/);
      const roomMatch = text.match(/Room:\s*(.+)/);
      const inMatch = text.match(/Check-in:\s*([^\n\r]+)/);
      const outMatch = text.match(/Check-out:\s*([^\n\r]+)/);
      const id = idMatch ? idMatch[1].trim() : '';
      const room = roomMatch ? roomMatch[1].trim() : '';
      const checkIn = inMatch ? inMatch[1].trim() : '';
      const checkOut = outMatch ? outMatch[1].trim() : '';
      const label = room && checkIn && checkOut
        ? `${room} — ${checkIn} → ${checkOut}`
        : (id || '-');
      return { id, room, checkIn, checkOut, label };
    } catch(_) {
      return { id: '', room: '', checkIn: '', checkOut: '', label: '-' };
    }
  };

  const markViewed = (id) => {
    setViewed(prev => {
      const next = new Set(prev);
      next.add(id);
      return next;
    });
  };

  const load = async () => {
    try {
      const token = localStorage.getItem('token');
      const { data } = await getSupportAll(token);
      const onlyRefunds = (Array.isArray(data) ? data : []).filter(m => (m.subject || '').startsWith('Refund Request for Booking '));
      setItems(onlyRefunds);
      setLoading(false);
    } catch (e) {
      setError(e?.response?.data?.message || e?.message || 'Failed to load refunds');
      setLoading(false);
    }
  };

  useEffect(() => { load(); }, []);

  const setStatus = async (id, status) => {
    try {
      const token = localStorage.getItem('token');
      const { data } = await updateSupportStatus(id, status, token);
      setItems(prev => prev.map(x => x._id === id ? data : x));
    } catch (e) {
      alert(e?.response?.data?.message || e?.message || 'Failed to update status');
    }
  };

  const filtered = items.filter(m => {
    const term = search.trim().toLowerCase();
    if (!term) return true;
    return (
      (m.subject || '').toLowerCase().includes(term) ||
      (m.email || '').toLowerCase().includes(term) ||
      (m.phone || '').toLowerCase().includes(term) ||
      (m.status || '').toLowerCase().includes(term)
    );
  });

  return (
    <div>
      <div className="mb-4 flex items-center gap-3">
        <input value={search} onChange={e=>setSearch(e.target.value)} placeholder="Search refunds (subject, email, phone, status)" className="w-full max-w-md rounded border px-3 py-2 text-sm" />
        <button onClick={load} className="rounded bg-neutral-200 px-3 py-2 text-sm hover:bg-neutral-300">Refresh</button>
      </div>
      {loading ? (
        <div className="py-6 text-neutral-600">Loading refunds...</div>
      ) : error ? (
        <div className="rounded border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">{error}</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Booking</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Requester</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Proof</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filtered.length === 0 && (
                <tr>
                  <td colSpan={6} className="px-6 py-6 text-center text-sm text-neutral-500">No refund requests.</td>
                </tr>
              )}
              {filtered.map(m => {
                const bookingId = (m.subject || '').replace('Refund Request for Booking ', '');
                const { label: bookingLabel } = extractBookingSummary(m.message);
                const proofUrl = extractProof(m.message);
                const hasViewed = viewed.has(m._id);
                return (
                  <tr key={m._id}>
                    <td className="px-6 py-4 whitespace-nowrap" title={bookingId}>{bookingLabel}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">{m.email || '-'}{m.phone ? ` | ${m.phone}` : ''}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">{new Date(m.createdAt).toLocaleString()}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      {m.status}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      {proofUrl ? (
                        <div className="flex items-center gap-2">
                          <img src={proofUrl} alt="proof thumbnail" className="h-10 w-10 rounded border object-cover" />
                          <button
                            onClick={() => { setPreview({ open: true, url: proofUrl, id: m._id }); markViewed(m._id); }}
                            className="rounded bg-neutral-700 px-3 py-1 text-white hover:bg-neutral-800"
                            title="View uploaded proof"
                          >
                            View
                          </button>
                          {!hasViewed && (
                            <span className="rounded bg-yellow-100 px-2 py-0.5 text-xs text-yellow-800">Not viewed</span>
                          )}
                        </div>
                      ) : (
                        <span className="text-neutral-400">-</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <div className="flex items-center gap-2">
                        <button
                          onClick={()=>setStatus(m._id, 'Resolved')}
                          className="rounded bg-green-600 px-3 py-1 text-white hover:bg-green-700 disabled:cursor-not-allowed disabled:opacity-60"
                          disabled={m.status==='Resolved' || !proofUrl || !hasViewed}
                          title={
                            m.status==='Resolved' ? 'Already approved' : (!proofUrl ? 'No proof uploaded' : (!hasViewed ? 'View the proof before approving' : 'Approve refund'))
                          }
                        >
                          Approve
                        </button>
                        <button onClick={()=>setStatus(m._id, 'Cancelled')} className="rounded bg-red-600 px-3 py-1 text-white hover:bg-red-700" disabled={m.status==='Cancelled'}>Cancel</button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          {preview.open && (
            <div className="fixed inset-0 z-[70] flex items-center justify-center bg-black/60 p-4" onClick={() => setPreview({ open: false, url: '' })}>
              <div className="max-h-[85vh] max-w-[90vw] overflow-auto rounded-lg bg-white p-3 shadow-2xl" onClick={e => e.stopPropagation()}>
                <div className="mb-2 flex items-center justify-between">
                  <div className="text-sm font-medium">Refund Proof</div>
                  <button onClick={() => setPreview({ open: false, url: '', id: '' })} className="rounded bg-neutral-200 px-2 py-1 text-sm hover:bg-neutral-300">Close</button>
                </div>
                <img src={preview.url} alt="Refund proof" className="max-h-[75vh] max-w-full rounded border object-contain" />
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default AdminRefunds;